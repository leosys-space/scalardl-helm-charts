# Default values for scalardl.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# nameOverride -- String to partially override scalardl.fullname template (will maintain the release name)
nameOverride: ""

# fullnameOverride -- String to fully override scalardl.fullname template
fullnameOverride: ""

envoy:
  # envoy.replicaCount -- number of replicas to deploy
  replicaCount: 3

  envoyConfiguration:
    # envoy.envoyConfiguration.adminAccessLogPath -- admin log path
    adminAccessLogPath: /dev/stdout

  image:
    # envoy.image.repository -- Docker image
    repository: ghcr.io/leosys-space/scalar-envoy
    # envoy.image.tag -- Docker tag
    version: 1.0.11
    # envoy.image.pullPolicy -- Specify a imagePullPolicy
    pullPolicy: IfNotPresent

  # envoy.imagePullSecrets -- Optionally specify an array of imagePullSecrets. Secrets must be manually created in the namespace.
  imagePullSecrets: []

  strategy:
    rollingUpdate:
      # envoy.strategy.rollingUpdate -- The number of pods that can be created above the desired amount of pods during an update
      maxSurge: 25%
      # envoy.strategy.rollingUpdate -- The number of pods that can be unavailable during the update process
      maxUnavailable: 25%
    # envoy.strategy.type -- New pods are added gradually, and old pods are terminated gradually, e.g: Recreate or RollingUpdate
    type: RollingUpdate

  # envoy.podSecurityContext -- PodSecurityContext holds pod-level security attributes and common container settings
  podSecurityContext: {}
    # fsGroup: 2000

  # envoy.securityContext -- Setting security context at the pod applies those settings to all containers in the pod
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000
  service:
    # envoy.service.type -- service types in kubernetes
    type: ClusterIP
    # envoy.service.annotations -- Service annotations, e.g: prometheus, etc.
    annotations: {}
    ports:
      envoy:
        # envoy.service.ports.envoy.port -- envoy public port
        port: 50051
        # envoy.service.ports.envoy.targetPort -- envoy k8s internal name
        targetPort: 50051
        # envoy.service.ports.envoy.protocol -- envoy protocol
        protocol: TCP
      envoy-priv:
        # envoy.service.ports.envoy-priv.port -- nvoy public port
        port: 50052
        # envoy.service.ports.envoy-priv.targetPort -- envoy k8s internal name
        targetPort: 50052
        # envoy.service.ports.envoy-priv.protocol -- envoy protocol
        protocol: TCP

  serviceMonitor:
    # envoy.serviceMonitor.enabled -- enable metrics collect with prometheus
    enabled: false
    # envoy.serviceMonitor.interval -- custom interval to retrieve the metrics
    interval: "15s"
    # envoy.serviceMonitor.namespace -- which namespace prometheus is located. by default monitoring
    namespace: monitoring

  prometheusRule:
    # envoy.prometheusRule.enabled -- enable rules for prometheus
    enabled: false
    # envoy.prometheusRule.namespace -- which namespace prometheus is located. by default monitoring
    namespace: monitoring

  grafanaDashboard:
    # ledger.grafanaDashboard.enabled -- enable grafana dashboard
    enabled: false
    # ledger.grafanaDashboard.namespace -- which namespace grafana dashboard is located. by default monitoring
    namespace: monitoring

  # envoy.resources -- resources allowed to the pod
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # envoy.nodeSelector -- nodeSelector is form of node selection constraint
  nodeSelector: {}

  # envoy.tolerations -- Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.
  tolerations: []

  # envoy.affinity -- the affinity/anti-affinity feature, greatly expands the types of constraints you can express
  affinity: {}
